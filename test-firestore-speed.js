/**
 * ============================================
 * TEST DE VELOCIDAD DE FIRESTORE
 * ============================================
 * Ejecutar en consola F12 para diagnosticar lentitud
 */

console.clear();
console.log('‚ö° TEST DE VELOCIDAD DE FIRESTORE\n');

async function testFirestoreSpeed() {
  const FB = window.FB;

  if (!FB || !FB.auth || !FB.db) {
    console.error('‚ùå Firebase no est√° inicializado');
    return;
  }

  const user = FB.auth.currentUser;
  if (!user) {
    console.error('‚ùå No hay usuario autenticado');
    return;
  }

  console.log('üë§ Usuario:', user.email);
  console.log('üÜî UID:', user.uid);

  const docRef = FB.doc(FB.db, 'userData', user.uid);

  console.log('\nüìä Iniciando medici√≥n de velocidad...\n');

  try {
    // Primera lectura (puede usar red)
    console.log('1Ô∏è‚É£ Primera lectura (red):');
    const start1 = performance.now();
    const doc1 = await FB.getDoc(docRef);
    const end1 = performance.now();
    const time1 = (end1 - start1).toFixed(0);

    if (doc1.exists()) {
      const data = doc1.data();
      const dataSize = JSON.stringify(data).length;
      const dataSizeKB = (dataSize / 1024).toFixed(2);

      console.log(`   ‚è±Ô∏è Tiempo: ${time1}ms`);
      console.log(`   üì¶ Tama√±o: ${dataSizeKB} KB`);
      console.log(`   üìù Expenses: ${data.expenses?.length || 0}`);
      console.log(`   üéØ Goals: ${data.goals?.length || 0}`);
      console.log(`   üõí Shopping: ${data.shoppingItems?.length || 0}`);

      // An√°lisis de velocidad
      console.log('\nüìà AN√ÅLISIS DE VELOCIDAD:');
      if (time1 < 500) {
        console.log('   ‚úÖ EXCELENTE - Muy r√°pido');
      } else if (time1 < 1000) {
        console.log('   ‚úÖ BUENO - Velocidad aceptable');
      } else if (time1 < 2000) {
        console.log('   ‚ö†Ô∏è MODERADO - Un poco lento');
      } else {
        console.log('   ‚ùå LENTO - Hay un problema');
      }

      // Diagn√≥stico
      if (time1 > 2000) {
        console.log('\nüîç DIAGN√ìSTICO DEL PROBLEMA:');

        if (dataSizeKB > 500) {
          console.log('   ‚ö†Ô∏è Documento muy grande (>500KB)');
          console.log('   üí° Soluci√≥n: Limpia im√°genes base64 del perfil');
        }

        if (data.expenses?.length > 1000) {
          console.log('   ‚ö†Ô∏è Muchos gastos guardados (>' + data.expenses.length + ')');
          console.log('   üí° Soluci√≥n: Archiva gastos antiguos');
        }

        console.log('\n   Otros factores:');
        console.log('   - Conexi√≥n a internet lenta');
        console.log('   - Servidor de Firestore sobrecargado');
        console.log('   - Firewall o VPN interfiriendo');
      }

      // Segunda lectura (debe usar cach√©)
      console.log('\n2Ô∏è‚É£ Segunda lectura (cach√©):');
      const start2 = performance.now();
      const doc2 = await FB.getDoc(docRef);
      const end2 = performance.now();
      const time2 = (end2 - start2).toFixed(0);

      console.log(`   ‚è±Ô∏è Tiempo: ${time2}ms`);
      console.log(`   üì¶ Fuente: ${doc2.metadata.fromCache ? 'CACH√â ‚úÖ' : 'RED ‚ö†Ô∏è'}`);

      if (doc2.metadata.fromCache) {
        console.log('   ‚úÖ Cach√© funcionando correctamente');
      } else {
        console.log('   ‚ö†Ô∏è No est√° usando cach√©');
      }

      // Comparaci√≥n
      const speedup = ((time1 / time2) * 100).toFixed(0);
      console.log(`\nüìä Mejora con cach√©: ${speedup}%`);

    } else {
      console.error('   ‚ùå No existe documento para este usuario');
    }

  } catch (error) {
    console.error('\n‚ùå ERROR:', error.code || error.message);
  }

  console.log('\n' + '='.repeat(50));
  console.log('‚úÖ Test completado');
}

// Ejecutar test
testFirestoreSpeed();
