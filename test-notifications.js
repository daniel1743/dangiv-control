/**
 * ============================================
 * SCRIPT DE PRUEBA - SISTEMA DE NOTIFICACIONES
 * ============================================
 * Copia y pega este c√≥digo en la consola F12
 */

console.log('üîî Iniciando pruebas del sistema de notificaciones...\n');

// 1. Verificar que existen los elementos del DOM
console.log('üìã 1. Verificando elementos del DOM:');
console.log('-----------------------------------');

const elements = {
  'Campanita Navbar': document.getElementById('notificationArea'),
  'Badge Navbar': document.getElementById('notificationCount'),
  'Campanita Banner': document.getElementById('bannerNotificationArea'),
  'Badge Banner': document.getElementById('bannerNotificationCount'),
  'Dropdown': document.getElementById('notificationDropdown'),
  'Lista': document.getElementById('notificationList'),
};

let allElementsExist = true;
Object.entries(elements).forEach(([name, element]) => {
  const exists = element !== null;
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${name}: ${exists ? 'Encontrado' : 'NO ENCONTRADO'}`);
  if (!exists) allElementsExist = false;
});

if (!allElementsExist) {
  console.error('‚ùå Algunos elementos no fueron encontrados. Revisa el HTML.');
} else {
  console.log('\n‚úÖ Todos los elementos existen en el DOM\n');
}

// 2. Verificar que existe la instancia de FinanceApp
console.log('üìã 2. Verificando instancia de FinanceApp:');
console.log('-----------------------------------');
if (window.app) {
  console.log('‚úÖ window.app existe');
  console.log(`   - Tipo: ${typeof window.app}`);
  console.log(`   - Constructor: ${window.app.constructor.name}`);

  // Verificar m√©todos relacionados con notificaciones
  const methods = [
    'updateNotifications',
    'updateNotificationBadge',
    'renderNotificationList',
    'setupNotificationBell',
    'createDailyMessageNotification',
    'showDailyMessageModal'
  ];

  console.log('\n   M√©todos de notificaciones:');
  methods.forEach(method => {
    const exists = typeof window.app[method] === 'function';
    console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${method}`);
  });
} else {
  console.error('‚ùå window.app no existe. La aplicaci√≥n no se ha inicializado.');
}

// 3. Probar actualizaci√≥n manual de notificaciones
console.log('\nüìã 3. Forzando actualizaci√≥n de notificaciones:');
console.log('-----------------------------------');
if (window.app && typeof window.app.updateNotifications === 'function') {
  try {
    window.app.updateNotifications();
    console.log('‚úÖ updateNotifications() ejecutado sin errores');
  } catch (error) {
    console.error('‚ùå Error al ejecutar updateNotifications():', error);
  }
} else {
  console.error('‚ùå No se puede ejecutar updateNotifications()');
}

// 4. Crear notificaci√≥n de prueba
console.log('\nüìã 4. Creando notificaci√≥n de prueba:');
console.log('-----------------------------------');

if (window.app) {
  try {
    // Simular una notificaci√≥n del sistema de mensajes diarios
    window.app.createDailyMessageNotification('morning');
    console.log('‚úÖ Notificaci√≥n de prueba (morning) creada');

    // Actualizar y renderizar
    window.app.updateNotifications();

    // Verificar badge
    const bannerBadge = document.getElementById('bannerNotificationCount');
    const navBadge = document.getElementById('notificationCount');

    console.log('\n   Estado de los badges:');
    console.log(`   - Banner Badge visible: ${bannerBadge && bannerBadge.style.display !== 'none'}`);
    console.log(`   - Navbar Badge visible: ${navBadge && navBadge.style.display !== 'none'}`);

  } catch (error) {
    console.error('‚ùå Error al crear notificaci√≥n de prueba:', error);
  }
}

// 5. Probar click en campanita del banner
console.log('\nüìã 5. Probando interacci√≥n con campanita:');
console.log('-----------------------------------');

const bannerBell = document.getElementById('bannerNotificationArea');
const dropdown = document.getElementById('notificationDropdown');

if (bannerBell && dropdown) {
  console.log('   Haz click en la campanita del banner para probar...');
  console.log('   El dropdown deber√≠a aparecer/desaparecer');

  // Simular click program√°tico
  console.log('\n   Simulando click autom√°tico en 2 segundos...');
  setTimeout(() => {
    bannerBell.click();
    const isVisible = !dropdown.classList.contains('hidden');
    console.log(`   ${isVisible ? '‚úÖ' : '‚ùå'} Dropdown ${isVisible ? 'visible' : 'oculto'} despu√©s del click`);

    // Cerrar despu√©s de 2 segundos
    setTimeout(() => {
      bannerBell.click();
      const isClosed = dropdown.classList.contains('hidden');
      console.log(`   ${isClosed ? '‚úÖ' : '‚ùå'} Dropdown ${isClosed ? 'cerrado' : 'a√∫n visible'} despu√©s del segundo click`);
    }, 2000);
  }, 2000);
} else {
  console.error('‚ùå No se pueden probar los clicks');
}

// 6. Informaci√≥n de depuraci√≥n
console.log('\nüìã 6. Informaci√≥n de depuraci√≥n:');
console.log('-----------------------------------');

if (window.app) {
  console.log('   Configuraci√≥n actual:');
  console.log(`   - Usuario: ${window.app.currentUser || 'No autenticado'}`);
  console.log(`   - Mensajes cargados: ${window.app.mensajesManana ? 'S√≠' : 'No'}`);
  console.log(`   - √öltima actualizaci√≥n mensajes: ${window.app.lastMessageUpdate || 'Nunca'}`);

  // Estado de notificaciones
  if (window.app.notificationStates) {
    console.log(`   - Estados guardados: ${window.app.notificationStates.size} notificaciones`);
  }
}

// 7. Comandos √∫tiles para seguir probando
console.log('\nüìã 7. Comandos √∫tiles para pruebas manuales:');
console.log('-----------------------------------');
console.log('// Crear notificaci√≥n de ma√±ana:');
console.log('window.app.createDailyMessageNotification("morning");\n');

console.log('// Crear notificaci√≥n de noche:');
console.log('window.app.createDailyMessageNotification("night");\n');

console.log('// Mostrar modal de mensaje:');
console.log('window.app.showDailyMessageModal(window.app.getRandomMessage("morning"), "morning");\n');

console.log('// Actualizar notificaciones:');
console.log('window.app.updateNotifications();\n');

console.log('// Ver todas las notificaciones actuales:');
console.log('console.log(window.app.currentNotifications);\n');

console.log('// Abrir/cerrar dropdown manualmente:');
console.log('document.getElementById("notificationDropdown").classList.toggle("hidden");\n');

console.log('\n‚úÖ Pruebas completadas. Revisa los resultados arriba.');
console.log('üí° Puedes usar los comandos √∫tiles para seguir probando.\n');
